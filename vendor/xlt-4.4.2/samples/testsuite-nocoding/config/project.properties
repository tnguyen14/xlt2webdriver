################################################################################
#
# Test Run Specific Settings
#
# Use this section to configure an (optional) file which contains the settings
# specific to a certain load test run. This is useful to externalize the
# definition of a certain load profile or a set of test conditions. This way,
# many of these configurations can be defined and prepared in advance and used
# as needed. For example, to switch to another load profile, just name the
# respective properties file.
#
################################################################################

## The file with test run specific settings.
com.xceptance.xlt.testPropertiesFile = test.properties

################################################################################
#
# Test Case Mapping
#
# Maps the test case class onto a load test name. The load test name will be
# referenced later in the load test configuration. You can map the same class
# to multiple load test names if needed.
#
################################################################################

com.xceptance.xlt.loadtests.TURL.class = com.xceptance.xlt.common.tests.TURL
com.xceptance.xlt.loadtests.TLWURL.class = com.xceptance.xlt.common.tests.TLWURL

# This demonstrates how to reuse the same test case code for a different config.
com.xceptance.xlt.loadtests.TOrderr.class  = com.xceptance.xlt.common.tests.TURL
com.xceptance.xlt.loadtests.TLWOrder.class  = com.xceptance.xlt.common.tests.TLWURL
com.xceptance.xlt.loadtests.TLWSearch.class  = com.xceptance.xlt.common.tests.TLWURL
com.xceptance.xlt.loadtests.TVisitorAndStaticContent.class  = com.xceptance.xlt.common.tests.TURL
com.xceptance.xlt.loadtests.TLWVisitorAndStaticContent.class = com.xceptance.xlt.common.tests.TLWURL

################################################################################
#
# Test Specific Settings
#
# Prefix test case specific settings with the test class name.
#
################################################################################
# This is the host for all scenarios above.
host = http://localhost:8080
hostsec = https://localhost:8443

# Imagine one scenario should use another host, you would do that like that
# TAuthor.host = http://anotherlocalhost

# Activate the user agent based unique ID per request, will turn a user agent into
# something like:
# Mozilla/5.0 (Windows NT 6.1; rv:17.0; Xceptance LoadTest 4.3.0) Gecko/20100101 Firefox/17.0 UID/ad228c44-f6a8-458e-93d1-e6c4cde46870
userAgent.UID=false

#########################################################################
#
# TURL
#
# This test case is designed for a quick evaluation of single urls
# using the XLT action API as well as a full DOM model. For validation,
# you have to specify an XPath expression that will be evaluated and
# optionally you can specify a result text
#
#########################################################################

## The file to use. If you do you specify a name, it will try to load 
## a file named currentusername.csv. So for instance of you mapped it to 
## TMyTest, it will load TMyTest.csv
## Important: The file will be read as UTF-8 on any platform to maintain
## perfect compatibility.
com.xceptance.xlt.common.tests.TURL.filename = torder.csv

# Just access the homepage, but at the same time also manually load all specified internal resources
# Automatic content loading should be off for that test
#com.xceptance.xlt.common.tests.TURL.filename = thomepage-plus-static-content.csv


#########################################################################
#
# TLWURL
#
# This test case is designed for a quick evaluation of single urls
# using the XLT action API as well as a full DOM model. For validation,
# you have to specify an XPath expression that will be evaluated and
# optionally you can specify a result text
#
#########################################################################

## The file to use. If you do you specify a name, it will try to load 
## a file named currentusername.csv. So for instance of you mapped it to 
## TMyTest, it will load TMyTest.csv
## Important: The file will be read as UTF-8 on any platform to maintain
## perfect compatibility.
# TOrder testcase but as LW user aka no DOM tree is build, just plain http communication
#com.xceptance.xlt.common.tests.TLWURL.filename = torder-lw.csv

# Just access the homepage, but at the same time also manually load all specified internal resources
# Automatic content loading should be off for that test
#com.xceptance.xlt.common.tests.TLWURL.filename = thomepage-plus-static-content-lw.csv

# TSearch as LW user
com.xceptance.xlt.common.tests.TLWURL.filename = tsearch-lw.csv

#########################################################################
#
# Mapped test cases
#
# This is effectively TURL and TLWURL, because we are using these classes. 
# See mapping above "Test Case Mapping". But we do not want to use the config for
# the test case, but rather use a different one.
#
#########################################################################
TOrder.filename = torder.csv
TLWOrder.filename = torder-lw.csv
TLWSearch.filename = tsearch-lw.csv
TVisitorAndStaticContent.filename = thomepage-plus-static-content.csv
TLWVisitorAndStaticContent.filename = thomepage-plus-static-content-lw.csv

################################################################################
#
# Project-Specific Report Generator Settings
#
# In order to reduce the list of requests in the report, the values of different
# requests can be merged together. You may specify one or more merge rules as
# outlined below:
#
#   com.xceptance.xlt.reportgenerator.requestMergeRules.<num>.<param> = <value>
#
# The rules are sorted numerically based on <num> and are applied in ascending
# order.
#
# The supported values for "<param>" are:
#
#   newName .................. new request name (required)
#
#   namePattern [n] .......... reg-ex defining a matching request name
#   transactionPattern [t] ... reg-ex defining a matching transaction name
#   agentPattern [a] ......... reg-ex defining a matching agent name
#   contentTypePattern [c] ... reg-ex defining a matching response content type
#   statusCodePattern [s] .... reg-ex defining a matching status code
#   urlPattern [u] ........... reg-ex defining a matching request URL
#   runTimeRanges [r] ........ list of run time segment boundaries
#
#   stopOnMatch .............. whether or not to process the next rule even if 
#                              the current rule applied (defaults to true)
#
# At least one of namePattern, transactionPattern, agentPattern, 
# contentTypePattern, statusCodePattern, urlPattern or runTimeRanges must be
# specified. If more than one pattern is given, all given patterns must
# match. 
#
# Note that newName may contain placeholders, which are replaced with the 
# specified capturing group from the respective pattern. The placeholder  
# format is as follows: {<category>:<capturingGroupIndex>}, where <category> is 
# the type code of the respective pattern (given in brackets above) and 
# <capturingGroupIndex> denotes the respective capturing group in the selected
# pattern (does not apply to runTimeRanges). 
#
# Excluding instead of Including
#
#   com.xceptance.xlt.reportgenerator.requestMergeRules.<num>.<param>.exclude = <value>
#
# All requests that match the exclude pattern will not be selected. For example, 
# to create a bucket for all non-JavaScript resources, you would setup a rule like that.
#
#   com.xceptance.xlt.reportgenerator.requestMergeRules.1.newName = {n:0} NonJS
#   com.xceptance.xlt.reportgenerator.requestMergeRules.1.namePattern = .+
#   com.xceptance.xlt.reportgenerator.requestMergeRules.1.contentTypePattern.exclude = javascript
#   com.xceptance.xlt.reportgenerator.requestMergeRules.1.stopOnMatch = false
# 
# Please note that an include pattern as well as an exclude pattern can be specified for 
# a pattern type at the same time. In this case, a request is selected if and only if it 
# matches the include pattern, but does not match the exclude pattern.
#
################################################################################

## First, we eliminate the sub-request naming pattern, because we do not need
## that at the moment. This turns all "name.1" or "name.1.1" and so on into "name".
com.xceptance.xlt.reportgenerator.requestMergeRules.0.newName = {n:1}
com.xceptance.xlt.reportgenerator.requestMergeRules.0.namePattern = ^([^\\.]*)(\\.[0-9]+)+$
com.xceptance.xlt.reportgenerator.requestMergeRules.0.contentTypePattern =  
com.xceptance.xlt.reportgenerator.requestMergeRules.0.statusCodePattern =
com.xceptance.xlt.reportgenerator.requestMergeRules.0.urlPattern = 
com.xceptance.xlt.reportgenerator.requestMergeRules.0.stopOnMatch = false

## All requests with URLs ending with ".js" are grouped under "<name> JS".
com.xceptance.xlt.reportgenerator.requestMergeRules.1.newName = {n:0} JS
com.xceptance.xlt.reportgenerator.requestMergeRules.1.namePattern = [^.]+
com.xceptance.xlt.reportgenerator.requestMergeRules.1.contentTypePattern =
com.xceptance.xlt.reportgenerator.requestMergeRules.1.statusCodePattern =
com.xceptance.xlt.reportgenerator.requestMergeRules.1.urlPattern = \\.js$
com.xceptance.xlt.reportgenerator.requestMergeRules.1.stopOnMatch = false

## All requests with URLs ending with common image file extension are grouped
## under "<name> Images".
com.xceptance.xlt.reportgenerator.requestMergeRules.3.newName = {n:0} Images  
com.xceptance.xlt.reportgenerator.requestMergeRules.3.namePattern = [^.]+
com.xceptance.xlt.reportgenerator.requestMergeRules.3.contentTypePattern =   
com.xceptance.xlt.reportgenerator.requestMergeRules.3.statusCodePattern =
com.xceptance.xlt.reportgenerator.requestMergeRules.3.urlPattern = \\.(gif|png|jpg|ico)$
com.xceptance.xlt.reportgenerator.requestMergeRules.3.stopOnMatch = false

## All requests with URLs ending with ".css" are grouped under "<name> CSS".
com.xceptance.xlt.reportgenerator.requestMergeRules.5.newName = {n:0} CSS
com.xceptance.xlt.reportgenerator.requestMergeRules.5.namePattern = [^.]+
com.xceptance.xlt.reportgenerator.requestMergeRules.5.contentTypePattern =
com.xceptance.xlt.reportgenerator.requestMergeRules.5.statusCodePattern =
com.xceptance.xlt.reportgenerator.requestMergeRules.5.urlPattern = \\.css$
com.xceptance.xlt.reportgenerator.requestMergeRules.5.stopOnMatch = false

## Finally, append the response code to each request name. This way, statistics
## are calculated separately for each response code. So, fast 500 error 
## responses for instance will not influence the statistics for normal 200 
## responses.  
com.xceptance.xlt.reportgenerator.requestMergeRules.10.newName = {n:0} [{s:0}]  
com.xceptance.xlt.reportgenerator.requestMergeRules.10.namePattern = .*
com.xceptance.xlt.reportgenerator.requestMergeRules.10.contentTypePattern =  
com.xceptance.xlt.reportgenerator.requestMergeRules.10.statusCodePattern = 30[0-9]+
com.xceptance.xlt.reportgenerator.requestMergeRules.10.urlPattern = 
com.xceptance.xlt.reportgenerator.requestMergeRules.10.stopOnMatch = false

## 
com.xceptance.xlt.reportgenerator.requestMergeRules.9.newName = {n:0} - {u:1}  
com.xceptance.xlt.reportgenerator.requestMergeRules.9.namePattern = .*
com.xceptance.xlt.reportgenerator.requestMergeRules.9.urlPattern = ^http[s]?://([^/]+)
com.xceptance.xlt.reportgenerator.requestMergeRules.9.stopOnMatch = false
